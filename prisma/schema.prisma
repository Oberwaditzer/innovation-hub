// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

model User {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  username          String?             @unique
  email             String             @unique
  emailConfirmed    Boolean            @default(false)
  firstName         String?
  lastName          String?
  profilePictureURL String?
  teams             UsersOnTeams[]
  workshops         UsersOnWorkshops[]
  WorkshopTemplate  WorkshopTemplate[]
}

model Team {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  title     String         @unique
  users     UsersOnTeams[]
  workshops Workshop[]
}

model WorkshopTemplate {
  id        String                 @id @default(cuid())
  title     String
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  public    Boolean
  steps     WorkshopTemplateStep[]
  Workshop  Workshop[]
  createdBy User                   @relation(fields: [userId], references: [id])
  userId    String
}

model WorkshopTemplateStep {
  id                 String            @id @default(cuid())
  title              String
  description        String?
  type               String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  durationSeconds    Int
  step               Int
  data               Json              @default("{}")
  WorkshopTemplate   WorkshopTemplate? @relation(fields: [workshopTemplateId], references: [id])
  workshopTemplateId String?
}

model Workshop {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  type               String
  title              String
  status             WorkshopStatus       @default(CREATED)
  data               Json                 @default("{}")
  step               Int                  @default(1)
  privacyLevel       WorkshopPrivacyLevel @default(FULL_VISIBLE)
  teams              Team[]
  users              UsersOnWorkshops[]
  template           WorkshopTemplate?    @relation(fields: [workshopTemplateId], references: [id])
  steps              WorkshopStep[]
  workshopTemplateId String?
}

model WorkshopStep {
  id              String   @id @default(cuid())
  title           String
  description     String?
  type            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  durationSeconds Int
  step            Int
  data            Json     @default("{}")
  workshop        Workshop @relation(fields: [workshopId], references: [id])
  workshopId      String
}

enum WorkshopPrivacyLevel {
  FULL_VISIBLE
  VISIBLE_WITHOUT_USER_INFORMATION
  PRIVATE
}

enum WorkshopStatus {
  CREATED
  STARTED
  STOPPED
  FINISHED
}

model UsersOnTeams {
  user   User    @relation(fields: [userId], references: [id])
  userId String
  team   Team    @relation(fields: [teamId], references: [id])
  teamId String
  admin  Boolean

  @@id([userId, teamId])
}

model UsersOnWorkshops {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  workshopId String
  admin      Boolean

  @@id([userId, workshopId])
}
